# services:
# - docker:dind

# variables:
#   NAMESPACE: nps-${ENVIRONMENT}
#   DOCKER_PORT: 8080  
#   CPU_TRIGGER: 95
#   MEM_TRIGGER: 95
#   HPA_MIN: 1
#   HPA_MAX: 10 

# stages:
# - sonar
# - build
# - deploy

# sonarqube-check:
#   stage: sonar
#   tags:
#     - runner
#   image: 
#     name: sonarsource/sonar-scanner-cli:latest
#     entrypoint: [""]
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#     GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   script: 
#     - |
#       sonar-scanner \
#         -Dsonar.projectKey=$CI_PROJECT_NAME \
#         -Dsonar.sources=./src \
#         -Dsonar.host.url=$SONAR_HOST_URL \
#         -Dsonar.login=$SONAR_TOKEN  \
#         -Dsonar.exclusions=**/ThirdParty/**,**/*.sql \
#         -Dsonar.qualitygate.wait=true
#   allow_failure: true
#   only:
#     - develop

# build:
#   stage: build
#   image: docker:latest
#   tags:
#     - runner
#   before_script:
#     - docker login -u $DOCKER_USER -p $DOCKER_PASS $AZURECR   
#   script:
#     - docker build -t ${AZURECR}/${CI_PROJECT_NAME}:${CI_COMMIT_SHORT_SHA} . || exit 1    
#     - docker push ${AZURECR}/${CI_PROJECT_NAME}:${CI_COMMIT_SHORT_SHA} || exit 1
#     - docker rmi -f ${AZURECR}/${CI_PROJECT_NAME}:${CI_COMMIT_SHORT_SHA} || exit 1
#   only:
#     - master
#     - tags
#     - release
#     - stage
#     - release-*
#     - develop

#  ##############    
#  ## deploy ##
#  ############ 
# deploy_dev:
#   stage: deploy
#   tags: 
#     - runner
#   environment: $ENVIRONMENT    
#   variables:
#     ENVIRONMENT: dev
#     PROJECT: $CI_PROJECT_NAME
#     FQDN: api.${ENVIRONMENT}.${DOMAIN}
#     BASE_PATH: gateway-nps    
#     VERSION: $CI_COMMIT_SHORT_SHA
#     BRANCH: $CI_COMMIT_BRANCH        
#     REQUEST_CPU: "10m"
#     REQUEST_MEM: "32Mi"
#     LIMIT_CPU: "50m"
#     LIMIT_MEM: "128Mi"  
#     INGRESS_CLASS: nginx
#     CLUSTER_ISSUE: cloudflare    
#     HPA_MAX: 1
#   script:     
#     - cat .k8s/manifest.yml | envsubst | kubectl --kubeconfig $KUBECONFIG apply -f -
#     - kubectl --kubeconfig $KUBECONFIG -n $NAMESPACE rollout restart deployment $PROJECT 
#   only:
#   - develop

# deploy_stg:
#   stage: deploy
#   tags: 
#     - runner
#   environment: $ENVIRONMENT    
#   variables:
#     ENVIRONMENT: stg
#     PROJECT: $CI_PROJECT_NAME
#     FQDN: api.${ENVIRONMENT}.${DOMAIN}
#     BASE_PATH: gateway-nps
#     VERSION: $CI_COMMIT_SHORT_SHA
#     BRANCH: $CI_COMMIT_BRANCH        
#     REQUEST_CPU: "10m"
#     REQUEST_MEM: "32Mi"
#     LIMIT_CPU: "50m"
#     LIMIT_MEM: "128Mi"  
#     INGRESS_CLASS: nginx
#     CLUSTER_ISSUE: cloudflare    
#     HPA_MAX: 1
#   script:     
#     - cat .k8s/manifest.yml | envsubst | kubectl --kubeconfig $KUBECONFIG apply -f - 
#     - kubectl --kubeconfig $KUBECONFIG -n $NAMESPACE rollout restart deployment $PROJECT 
#   only:
#   - tags  
#   - release-*
#   - release
#   - stage

# deploy_prd:
#   stage: deploy
#   tags: 
#     - runner
#   environment: $ENVIRONMENT    
#   variables:
#     ENVIRONMENT: prd
#     PROJECT: $CI_PROJECT_NAME
#     FQDN: api.${DOMAIN}
#     BASE_PATH: gateway-nps    
#     CLUSTER: conpass-production-k8s
#     VERSION: $CI_COMMIT_SHORT_SHA
#     BRANCH: $CI_COMMIT_BRANCH        
#     REQUEST_CPU: "250m"
#     REQUEST_MEM: "256Mi"
#     LIMIT_CPU: "500m"
#     LIMIT_MEM: "512Mi"  
#     INGRESS_CLASS: nginx
#     CLUSTER_ISSUE: cloudflare               
#   script:     
#     - cat .k8s/manifest.yml | envsubst | kubectl --kubeconfig $KUBECONFIG --context $CLUSTER apply -f - 
#     - kubectl --kubeconfig $KUBECONFIG --context $CLUSTER -n $NAMESPACE rollout restart deployment $PROJECT
#   only:
#   - master

